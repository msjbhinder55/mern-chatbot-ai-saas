name: MERN Chatbot CI Pipeline

on:
  push:
    branches: [main]
    paths-ignore:
      - "README.md"
      - "docs/**"
  pull_request:
    paths-ignore:
      - "README.md"
      - "docs/**"

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.hash.outputs.hash }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate cache key
        id: hash
        run: echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  lint-backend:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        working-directory: ./backend
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Run ESLint
        working-directory: ./backend
        run: |
          if [ -f .eslintrc.cjs ]; then
            npm run lint -- --config .eslintrc.cjs
          else
            npm run lint
          fi || (echo "ESLint failed" && exit 1)

  test-backend:
  needs: setup
  runs-on: ubuntu-latest
  steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v3
      with:
        node-version: 18
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
    - name: Run tests
      working-directory: ./backend
      run: npm test
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: backend-test-results
        path: ./backend/test-results.xml

  build-backend:
    needs: [lint-backend, test-backend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mern-chatbot-backend:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  lint-frontend:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint || (echo "ESLint failed" && exit 1)

  test-frontend:
  needs: setup
  runs-on: ubuntu-latest
  steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v3
      with:
        node-version: 18
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    - name: Run tests
      working-directory: ./frontend
      run: npm test
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: frontend-test-results
        path: ./frontend/test-results.xml

  build-frontend:
    needs: [lint-frontend, test-frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mern-chatbot-frontend:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  sast-analysis:
  needs: setup
  runs-on: ubuntu-latest
  steps:
    - uses: actions/checkout@v4
    
    - name: Run SAST (Semgrep)
      uses: returntocorp/semgrep-action@v1
      with:
        config: p/ci
        outputFormat: sarif
        outputFile: semgrep.sarif
    
    - name: Verify SARIF file exists
      run: |
        if [ ! -f "semgrep.sarif" ]; then
          echo "{}" > semgrep.sarif  # Create empty file if none exists
        fi
    
    - name: Upload SARIF results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep.sarif